#!/usr/bin/env python3
"""Read UTF-8 on stdin and writes UTF-16-LE on stdout.

This is intended for use with the WSL clip.exe utility.
"""

__version__ = "0.1.0"

import argparse
import os
import sys
from typing import NoReturn

COMMAND_NAME = "utf8-to-utf16le"

EX_USAGE = 64 # Command line usage error

class SystemExitArgumentParser(argparse.ArgumentParser):
    """A version of ArgumentParser that uses sysexits.h.

    This will use the standard return codes in sysexits.h and exit with
    64 (EX_USAGE) instead of 2 when the user provides invalid command
    line arguments.
    """

    def error(self, message: str) -> NoReturn:
        """Print a usage message to stderr and exit with code 64."""

        self.print_usage()
        self.exit(EX_USAGE, f"{self.prog}: error: {message}\n")

def convert_and_pipe() -> None:
    """Read stdin, convert to UTF-16-LE, and write to stdout."""

    sys.stdout.reconfigure(encoding="utf-16-le") # type: ignore[attr-defined]
    sys.stdout.write(sys.stdin.read())

def main() -> None:
    """Run as the entry point of the script."""

    parser = SystemExitArgumentParser(
        prog=COMMAND_NAME,
        description=__doc__,
        allow_abbrev=False,
        )

    parser.add_argument(
        "-V", "--version",
        action="version",
        version=f"%(prog)s {__version__}",
        )

    parser.parse_args()

    if os.isatty(sys.stdin.fileno()):
        print(
            f"{COMMAND_NAME}: refusing to read input from a TTY",
            file=sys.stderr,
            )
        sys.exit(EX_USAGE)

    convert_and_pipe()

if __name__ == "__main__":
    main()
