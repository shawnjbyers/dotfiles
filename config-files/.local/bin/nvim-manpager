#!/bin/sh

set -eu

readonly ex_ok=0
readonly ex_failure=1 # generic failure
readonly ex_usage=64 # command line usage error
readonly ex_software=70 # internal error

readonly cmd_name="nvim-manpager"
readonly version="0.1.0"

readonly vim_settings='
set filetype=man nomodified nolist norelativenumber nonumber
'

basename="$(basename -- "$0")"
readonly basename

warn() {
	printf '%s: %s\n' "$basename" "$*" >&2
}

print_version() {
	printf '%s %s\n' "$cmd_name" "$version"
}

print_usage() {
	printf 'usage: %s [-h] [-V]\n' "$cmd_name"
	echo
	echo "Use like so:"
	printf '$ MANPAGER=%s\n' "$cmd_name"
	echo
	echo "options:"
	echo "  -h, --help    show this help message and exit"
	echo "  -V, --version show program's version number and exit"
}

invalid_arguments() {
	warn "Invalid arguments."
	echo
	print_version
	echo
	print_usage
	exit "$ex_usage"
}

# Parse arguments.

if [ $# != 0 ]
then
	if [ $# != 1 ]
	then
		invalid_arguments
	fi

	case "$1" in
		-h | --help)
			print_usage
			exit "$ex_ok"
			;;
		-V | --version)
			print_version
			exit "$ex_ok"
			;;
		*)
			invalid_arguments
			;;
	esac
fi

vim_impl=''

for v in nvim vim
do
	if command -v -- "$v" > /dev/null 2>&1
	then
		vim_impl="$v"
		break
	fi
done

if [ "$vim_impl" = '' ]
then
	echo 'nvim-manpager: could not find a suitable text editor'
	exit "$ex_failure"
fi

if [ "$vim_impl" = nvim ]
then
	# temporarily use col -b before nvim gets updated
	"$vim_impl" +'Man!'
elif [ "$vim_impl" = vim ]
then
	col -b | "$vim_impl" -c "$vim_settings" -
else
	warn 'internal error: unrecognized Vim implementation'
	exit "$ex_software"
fi
