#!/usr/bin/env python3

import argparse
import os
import shlex

cmd_name = 'battstats'
version = '0.1.0'

def read_strip_file(filename):
    with open(filename) as f:
        return f.read().strip()

def get_battery_stats(*, power_supply_dir):
    for de in os.scandir(power_supply_dir):
        if not de.is_dir():
            continue
        ps_path = de.path

        ps_type = read_strip_file(f'{ps_path}/type')
        if ps_type != 'Battery':
            continue

        batt_path = ps_path
        capacity = int(read_strip_file(f'{batt_path}/capacity'))
        status = read_strip_file(f'{batt_path}/status')
        charge_now = int(read_strip_file(f'{batt_path}/charge_now'))
        charge_full = int(read_strip_file(f'{batt_path}/charge_full'))
        charge_full_design = \
            int(read_strip_file(f'{batt_path}/charge_full_design'))

        yield de.name, capacity, status, \
            charge_now, charge_full, charge_full_design

def main():
    parser = argparse.ArgumentParser(
        prog=cmd_name,
        description='Print statistics about available batteries.',
        allow_abbrev=False
    )

    parser.add_argument(
        '-V', '--version', action='version', version=f'%(prog)s {version}'
    )

    parser.add_argument(
        '--power-supply-dir',
        type=str,
        default='/sys/class/power_supply'
    )

    args = parser.parse_args()

    for bat in get_battery_stats(power_supply_dir=args.power_supply_dir):
        name, capacity, status, \
            charge_now, charge_full, charge_full_design = bat
        computed_capacity = charge_now / charge_full * 100
        assert round(computed_capacity) == capacity
        health = charge_full / charge_full_design * 100
        print(f'{shlex.quote(name)}: {status} ' + \
            f'{computed_capacity:.1f}% Health {health:.1f}%')

if __name__ == '__main__':
    main()
