#!/usr/bin/env sh

set -eu

readonly ex_ok=0
readonly ex_failure=1 # generic failure
readonly ex_usage=64 # command line usage error
readonly ex_software=70 # internal error

warn() (
printf '%s: %s\n' "${bname}" "$*" >&2
)

warn_printf() {
  if [ $# -lt 1 ]; then
    warn 'internal error: warn_printf: bad usage'
    exit "${ex_software}"
  fi

  (
  fmt_str="$1"
  if [ $# -eq 1 ]; then
    printf '%s: '"${fmt_str}"'\n' "${bname}" >&2
  else
    fmt_args=''
    is_first=true
    is_second=''
    for arg in "$@"; do
      if [ "${is_first}" != '' ]; then
        is_first=''
        is_second=true
        continue
      fi
      if [ "${is_second}" != '' ]; then
        is_second=''
        fmt_args="${arg}"
      else
        fmt_args="${fmt_args} ${arg}"
      fi
    done
    printf '%s: '"${fmt_str}"'\n' "${bname}" "${fmt_args}" >&2
  fi
  )
}

pipe_or_die() (
if [ $# = 0 ]; then
  printf '%s: pipe_or_die: internal error: invalid usage\n' "${bname}" >&2
  kill -- "${self}" || {
    printf '%s: pipe_or_die: internal error: failed to kill self\n' "${bname}" >&2
  }
  exit "${ex_software}"
fi

command_name="$1"

"$@" || {
  printf '%s: %s: command failed\n' "${bname}" "${command_name}" >&2
  kill -- "${self}" || {
    printf '%s: pipe_or_die: internal error: failed to kill self\n' "${bname}" >&2
  }
  exit "${ex_software}"
}
)

bname="$(basename -- "$0")" || {
  bname="$0"
  warn 'basename failed'
}

self="$$"

print_help() (
printf 'usage: %s [-h] [-d power-directory]\n' "${bname}" >&2
)

power_dir='/sys/class/power_supply'

while getopts :hd: name; do
  case "${name}" in
    h)
      print_help
      exit "${ex_ok}"
      ;;
    d)
      power_dir="${OPTARG}"
      ;;
    :)
      warn_printf 'missing argument for -%s option' "${OPTARG}"
      exit "${ex_usage}"
      ;;
    \?)
      warn_printf 'unrecognized option: -%s' "${OPTARG}"
      exit "${ex_usage}"
      ;;
    *)
      warn_printf 'internal error: unhandled argument %s' "${name}"
      exit "${ex_software}"
      ;;
  esac
done

shift $((OPTIND - 1))

if [ $# -ne 0 ]; then
  warn 'unexpected arguments'
  print_help
  exit "${ex_usage}"
fi

if ! [ -e "${power_dir}" ]; then
  printf '%s: %s does not exist\n' "${bname}" "${power_dir}" >&2
  exit "${ex_failure}"
fi

if ! [ -d "${power_dir}" ]; then
  printf '%s: %s is not a directory\n' "${bname}" "${power_dir}" >&2
  exit "${ex_failure}"
fi

if [ "$(ls -- "${power_dir}")" = '' ]; then
  exit "${ex_ok}"
fi
# no power supplies.

pipe_or_die ls -1A -- "${power_dir}"/. | while read -r power_supply; do
  power_supply="${power_dir}"'/'"${power_supply}"

  if [ -f "${power_supply}"'/type' ]; then
    if [ "$(cat -- "${power_supply}"'/type')" = 'Battery' ]; then
      batt_name="${power_supply##*/}"
      quoted_batt_name=\'"$(printf '%s\n' "${batt_name}" | sed -E "s/'/'"'\\'"''/g")"\' || continue
      batt_status="$(cat -- "${power_supply}/status")" || continue
      batt_capacity="$(cat -- "${power_supply}/capacity")" || continue
      batt_charge_full="$(cat -- "${power_supply}/charge_full")" || continue
      batt_charge_full_design="$(cat -- "${power_supply}/charge_full_design")" || continue
      batt_health="$((batt_charge_full * 100 / batt_charge_full_design))" || continue
      batt_info_cap="${batt_status} ${batt_capacity}"'%'
      batt_info_health='Health '"${batt_health}"'%'
      batt_line="${quoted_batt_name}"': '"${batt_info_cap}"' '"${batt_info_health}"
      printf '%s\n' "${batt_line}"
    fi
  fi
done || exit "${ex_failure}"
