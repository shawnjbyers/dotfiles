#!/usr/bin/env python3
"""Jiggle the mouse to keep the screen awake.

This command is capable of jiggling the mouse indefinitely or a limited
number of times. The delay between jiggles can also be specified by a
command-line argument.
"""

__version__ = '0.1.0'

import argparse
import os
import time
import sys

COMMAND_NAME = 'jiggle-mouse'

def jiggle() -> None:
    """Jiggle the mouse and exit on failure."""

    exit_status = os.system(
        'xdotool mousemove_relative 1 0 mousemove_relative -- -1 0'
        )

    if exit_status != 0:
        print(f'{COMMAND_NAME}: error: unable to jiggle mouse',
              file=sys.stderr)
        sys.exit(1)

def print_delay_error() -> None:
    """Print a message indicating an invalid user-specified delay."""

    print(f'{COMMAND_NAME}: error: invalid delay value',
          file=sys.stderr)
    print(f'example: {COMMAND_NAME} --delay="500 ms"', file=sys.stderr)
    print(f'example: {COMMAND_NAME} --delay="2 s"', file=sys.stderr)
    print(f'example: {COMMAND_NAME} --delay="3 min"', file=sys.stderr)

def wait(*, delay: str) -> None:
    """Sleep for a given delay."""

    try:
        delay_nstr, unit = delay.split(' ')
        delay_num = float(delay_nstr)
    except ValueError:
        print_delay_error()
        sys.exit(1)

    if unit == 'ms':
        delay_s = delay_num / 1000
    elif unit == 's':
        delay_s = delay_num
    elif unit == 'min':
        delay_s = delay_num * 60
    else:
        print_delay_error()
        sys.exit(1)

    time.sleep(delay_s)

def wait_and_jiggle(*, delay: str) -> None:
    """Sleep then jiggle the mouse in that order."""

    wait(delay=delay)
    jiggle()

def jiggle_and_wait(*, delay: str) -> None:
    """Jiggle the mouse then sleep in that order."""

    jiggle()
    wait(delay=delay)

def main() -> None:
    """Runs as the entry point of the script."""

    parser = argparse.ArgumentParser(
        prog=COMMAND_NAME,
        description='Jiggle the mouse.',
        allow_abbrev=False,
        )
    parser.add_argument(
        '-V', '--version',
        action='version', version=f'%(prog)s {__version__}',
        )
    parser.add_argument('--delay', type=str, default='3 min')
    parser.add_argument('--count', type=int)
    args = parser.parse_args()

    try:
        if args.count is None:
            while True:
                jiggle_and_wait(delay=args.delay)
        else:
            for i in range(0, args.count):
                if i == 0:
                    jiggle()
                else:
                    wait_and_jiggle(delay=args.delay)
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()
