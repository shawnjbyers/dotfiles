set encoding=utf-8

function InteractiveSystem(command)
  call system(a:command)

  if v:shell_error != 0
    execute "!"..a:command
  endif
endfunction

" Executes the file currently being edited if the file exists.
function ExecFile(filepath, shouldUseSudo)
  if len(a:filepath) == 0
    echom "no filename"
    return 1
  endif

  let cmd = "!"

  if a:shouldUseSudo
    let cmd = l:cmd.."sudo "
  endif

  if a:filepath[0] != "/"
    let cmd = l:cmd.."./"
  endif

  let cmd = l:cmd..shellescape(a:filepath)
  echom l:cmd
  execute l:cmd
  return 0
endfunction

function CExecFile(filepath)
  let executable = fnamemodify(a:filepath, ":r")
  call InteractiveSystem(
      \"cc -Wall -Wextra -Werror -g -O0 -o "
      \..shellescape(l:executable)
      \.." "
      \..shellescape(a:filepath)
  \)

  if v:shell_error != 0
    echomsg "Could not compile file "..a:filepath
    return
  endif

  call ExecFile(executable, 0)
endfunction

function JavaExecFile(filepath)
  call InteractiveSystem("javac "..shellescape(a:filepath))

  if v:shell_error != 0
    return
  endif

  let classname = fnamemodify(a:filepath, ":r")

  execute "!java -enableassertions "..shellescape(l:classname)
endfunction

function InteractiveLatexCompile(filepath)
  call InteractiveSystem("pdflatex -- "..shellescape(a:filepath))
endfunction


function MakeExecutable(filepath)
  call InteractiveSystem("chmod -- u+x "..shellescape(a:filepath))
endfunction

function LaunchPdfReader(filepath)
  call system("(zathura -- "..shellescape(a:filepath).." &)")
  " TODO: Support other PDF readers like mupdf, evince, and fall back to
  " xdg-open.
endfunction

" enable syntax highlighting
syntax on

" enable absolute line numbers
set number

" disable unnecessary indentation rules
set noautoindent
set nosmartindent
set nocindent

" lines should wrap not get cut off
set wrap

" don't highlight all matches of last search
set nohlsearch

" show where current search matches as it's being typed
set incsearch

" ignore case while searching unless uppercase letters are present
set smartcase

" ignore case when tab-completing filenames
set wildignorecase

" avoid completing ambiguous matches and list possible options
set wildmode=longest:full

" if a file changes, automatically read in the new version. this allows the
" ``chmod'' binding below to work without an extraneous message
set autoread

" allow timeout on things like <Leader>d but not on <Esc>O
set timeoutlen=1000 ttimeoutlen=0

filetype on " enable filetype detection
filetype plugin on " enable loading filetype plugins
filetype indent on " enable filetype-based indentation

" if you type ``:list'', then it will display the tabs
set listchars=tab:>~
set list

" highlight trailing whitespace on a line in red
highlight TrailingSpaces ctermbg=red guibg=red
match TrailingSpaces /\v\s+$/

" show as much of the current line as possible if it doesn't fit on the screen
set display=lastline

" display partially-finished, normal-mode commands at the bottom right
set showcmd

" recognize .Rprofile
autocmd BufEnter .Rprofile setlocal filetype=r

augroup personal

  " use four spaces for R
  autocmd FileType r setlocal expandtab shiftwidth=4 tabstop=4

  " use two spaces for Dart
  autocmd FileType dart setlocal expandtab shiftwidth=2 tabstop=2

  " autoinsert a newline when a line gets too long
  autocmd FileType text,markdown setlocal textwidth=72

  " do not round indentation to a multiple of 'shiftwidth'
  autocmd FileType scheme,lisp setlocal noshiftround

  " make sure tabs are real tabs and not expanded into spaces
  autocmd FileType make,asm setlocal noexpandtab tabstop=8

  autocmd FileType c,asm map <CR> :w\|:!make run<CR>
  autocmd FileType c,asm map <Tab> :w\|:!make test<CR>

  autocmd FileType c map <BS> :w\|:call CExecFile(@%)<CR>

  autocmd FileType rust map <CR> :w\|:!cargo -q run<CR>
  autocmd FileType rust map <Tab> :w\|:!cargo -q test<CR>
  autocmd FileType java map <CR> :w\|:!mvn -q run<CR>
  autocmd FileType java map <Tab> :w\|:!mvn -q test<CR>
  autocmd FileType java map <BS> :w\|:call JavaExecFile(@%)<CR>
  autocmd FileType text map <CR> :w<CR>
  autocmd FileType tex,plaintex map <CR> :w\|:!make run<CR><CR>
  autocmd FileType tex map <BS> :w\|:call InteractiveLatexCompile(@%)<CR>
  autocmd FileType tex map <Tab> :w\|:call LaunchPdfReader(fnamemodify(@%, ":r")..".pdf")<CR>
  autocmd FileType stp,d,bpftrace map <CR> :w\|:call ExecFile(@%, 1)<CR>

augroup END

" these mappings save the current file
nnoremap <C-S> :w<CR>
inoremap <C-S> <C-O>:w<CR>

" these mappings force the user to use extended regular expressions (EREs)
" when searching
nnoremap / i<CR>USE /\v INSTEAD<CR><CR>
nnoremap /<Bslash>v /<Bslash>v

" this mapping inserts the date and time
" posix-compliant: POSIX.1-2008
" compliant: ISO 8601
nnoremap <Leader>d :r !datetime \|\| date +'\%Y-\%m-\%dT\%T'<CR>kJ

" this mapping makes the current file executable
" posix-compliant: POSIX.1-2008
nnoremap <Leader>x :w\|:call MakeExecutable(@%)\|:redraw!<CR>
" ``set autoread'' found earlier suppresses a vim warning

" executes the current file
nnoremap <Leader>e :w\|:call ExecFile(@%, 0)<CR>

nnoremap <Leader>s i<CR>USE :filetype detect INSTEAD<CR><CR>

nnoremap <Leader>ma :w\|!make<CR>
nnoremap <Leader>mt :w\|!make test<CR>
nnoremap <Leader>mr :w\|!make run<CR>

" shortcuts to start remapping various keys
nnoremap <Leader><CR> :nnoremap <lt>CR> :w\\|:!
nnoremap <Leader><BS> :nnoremap <lt>BS> :w\\|:!
nnoremap <Leader><Del> :nnoremap <lt>Del> :w\\|:!
nnoremap <Leader><Tab> :nnoremap <lt>Tab> :w\\|:!


function IsRoot()
  let userid = trim(system("id -u"))
  if userid == "0"
    return 1
  else
    return 0
  endif
endfunction

if IsRoot()
  " disable viminfo (see :help 'viminfo')
  set viminfo='0,f0,<0,:0,@0,/0
else
  " enable viminfo with certain values (see :help 'viminfo')
  set viminfo='100,<50,s10,h
endif
